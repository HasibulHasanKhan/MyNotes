* Higher Order Functions Problem :

Problem : Function Caching:- Create a function that caches results of another function to improve performance.
------------------------------------
ðŸ”¹ Implementing Function Caching (Memoization) in JavaScript
Caching (or memoization) is a technique that stores the results of expensive function calls and returns the stored result when the same inputs occur again :

ðŸ”¹ Custom Memoization Function :

function memoize(fn) {
    const cache = new Map();
    
    return function(...args) {
        const key = JSON.stringify(args); // Convert arguments into a string key
        if (cache.has(key)) {
            console.log("Fetching from cache:", key);
            return cache.get(key);
        }
        
        console.log("Calculating result:", key);
        const result = fn(...args);
        cache.set(key, result);
        return result;
    };
}
ðŸ”¹ Example Usage: Caching Factorial Calculation :

function factorial(n) {
    if (n === 0 || n === 1) return 1;
    return n * factorial(n - 1);
}

// Create a cached version of factorial
const cachedFactorial = memoize(factorial);

console.log(cachedFactorial(5)); // Calculates and stores result
console.log(cachedFactorial(5)); // Fetches from cache (improved performance)
console.log(cachedFactorial(6)); // Calculates new value

ðŸ”¹ Example Usage: Caching API Calls :


async function fetchData(url) {
    const response = await fetch(url);
    return response.json();
}

// Create a cached version of fetchData
const cachedFetch = memoize(fetchData);

cachedFetch("https://jsonplaceholder.typicode.com/todos/1")
    .then(data => console.log(data));

cachedFetch("https://jsonplaceholder.typicode.com/todos/1") // From cache
    .then(data => console.log(data));


ðŸ”¹ Explanation
Stores results in a Map using function arguments as a key.
Returns cached results if the function is called with the same arguments.
Recalculates only if new arguments are passed.


ðŸ”¹ Benefits
âœ… Reduces duplicate calculations
âœ… Speeds up function calls
âœ… Ideal for expensive computations (e.g., Fibonacci, API calls, etc.)


--------------------------
function memoize(fn) {
    const cache = new Map();

    return function (...args) {
        const key = JSON.stringify(args);
        if (cache.has(key)) {
            console.log("Fetching from cache:", key);
            return cache.get(key);
        }

        console.log("Computing result for:", key);
        const result = fn(...args);
        cache.set(key, result);
        return result;
    };
}

// Example usage
function slowFunction(num) {
    // Simulating an expensive computation
    for (let i = 0; i < 1e6; i++) {}
    return num * num;
}

const memoizedFunction = memoize(slowFunction);

console.log(memoizedFunction(5)); // Computation happens
console.log(memoizedFunction(5)); // Retrieved from cache
console.log(memoizedFunction(10)); // Computation happens
console.log(memoizedFunction(10)); // Retrieved from cache




Explanation:

The memoize function takes another function (fn) as an argument.
It uses a Map object to store previously computed results.
When the returned function is called, it checks if the result is in the cache.
If found, it returns the cached result, improving performance.
Otherwise, it computes the result, stores it in the cache, and returns it.

-------------------------------------
ðŸ“Œ 1. Understanding Memoization
What is Memoization?
Memoization is a technique to optimize recursive or expensive computations by storing previously computed results in a cache.
If the same input appears again, the function fetches the result from the cache instead of recalculating it.
Why Use Memoization?
Performance improvement: Reduces redundant calculations.
Saves computation time: Especially useful for recursive functions like factorial or Fibonacci.
